import pandas as pd
df = pd.read_csv("powerladder_data.csv", encoding="utf-8-sig")
print(df.head())  # 상위 5개 데이터 출력
import pandas as pd
df = pd.read_csv("powerladder_data.csv", encoding="utf-8-sig")
print(df.head())  # 상위 5개 데이터 출력
xit()
exit()
import pandas as pd
df = pd.read_csv("powerladder_data.csv", encoding="utf-8-sig")
print(df.head())  # 상위 5개 데이터 출력
exit()
print(df[df["날짜"] == "2025-03-16"])
import pandas as pd
# CSV 파일 불러오기
df = pd.read_csv("powerladder_data.csv", encoding="utf-8-sig")
# 데이터 확인
print(df.head())  # 처음 5개 데이터 출력
print(df[df["날짜"] == "2025-03-16"])
df_filtered = df[df["날짜"] == "2025-03-16"]
df_filtered.to_csv("filtered_data.csv", index=False, encoding="utf-8-sig")
print(" 필터링된 데이터 저장 완료!")
df_sorted = df.sort_values(by="회차", ascending=False)
print(df_sorted.head(10))  # 상위 10개 출력
df_filtered.to_csv("filtered_data.csv", index=False, encoding="utf-8-sig")
print(" 필터링된 데이터 저장 완료!")
좌_횟수 = df[df["결과"] == "좌"].shape[0]
우_횟수 = df[df["결과"] == "우"].shape[0]
print(f"좌 출현 횟수: {좌_횟수}")
print(f"우 출현 횟수: {우_횟수}")
import matplotlib.pyplot as plt
df["결과"].value_counts().plot(kind="bar", color=["blue", "red"])
plt.title("좌/우 출현 횟수")
plt.xlabel("결과")
plt.ylabel("횟수")
plt.show()
exit()
import pandas as pd
df = pd.read_csv("powerladder_data.csv", encoding="utf-8-sig")
print(df.head())  # 데이터 확인
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
# 한글 폰트 설정
font_path = "C:/Windows/Fonts/malgun.ttf"  # '맑은 고딕' 폰트
font_prop = fm.FontProperties(fname=font_path, size=12)
plt.rc("font", family=font_prop.get_name())
# 그래프 그리기
df["결과"].value_counts().plot(kind="bar", color=["blue", "red"])
plt.title("좌/우 출현 횟수")
plt.xlabel("결과")
plt.ylabel("횟수")
plt.show()
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
# 한글 폰트 설정 (Windows 사용자의 경우)
font_path = "C:/Windows/Fonts/malgun.ttf"  # 맑은 고딕 폰트
font_prop = fm.FontProperties(fname=font_path, size=12)
plt.rc("font", family=font_prop.get_name())
# 그래프 그리기
df["결과"].value_counts().plot(kind="bar", color=["blue", "red"])
plt.title("좌/우 출현 횟수", fontproperties=font_prop)  # 한글 제목 설정
plt.xlabel("결과", fontproperties=font_prop)  # 한글 X축 제목
plt.ylabel("횟수", fontproperties=font_prop)  # 한글 Y축 제목
plt.show()
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
# 한글 폰트 설정 (Windows 사용자의 경우)
font_path = "C:/Windows/Fonts/malgun.ttf"  # 맑은 고딕 폰트 경로
font_prop = fm.FontProperties(fname=font_path, size=12)
plt.rc("font", family=font_prop.get_name())
# 그래프 그리기
df["결과"].value_counts().plot(kind="bar", color=["blue", "red"])
plt.title("좌/우 출현 횟수", fontproperties=font_prop)  # 한글 제목 설정
plt.xlabel("결과", fontproperties=font_prop)  # 한글 X축 제목
plt.ylabel("횟수", fontproperties=font_prop)  # 한글 Y축 제목
plt.show()
import pandas as pd
# 데이터 불러오기
df = pd.read_csv("powerladder_data.csv", encoding="utf-8-sig")
# 결과값을 숫자로 변환
mapping = {"좌삼짝": 0, "우삼홀": 1, "좌사홀": 2, "우사짝": 3}
df["결과"] = df["결과"].map(mapping)
# 최근 5회 패턴을 반영한 새로운 특징 생성
for i in range(1, 6):  
        df[f"이전_{i}"] = df["결과"].shift(i)
        
# 결측값 제거
df = df.dropna()
# 학습 데이터 저장
df.to_csv("processed_data.csv", index=False, encoding="utf-8-sig")
print("데이터 전처리 완료")
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
# 데이터 불러오기
df = pd.read_csv("processed_data.csv", encoding="utf-8-sig")
# 입력 데이터(X)와 결과값(y) 분리
X = df.drop(columns=["결과"])  # 입력 변수
y = df["결과"]  # 예측 대상
# 학습/테스트 데이터 분할
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# 랜덤포레스트 모델 학습
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
# 예측 및 정확도 평가
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"모델 정확도: {accuracy:.2f}")
from sklearn.model_selection import train_test_split
exit()
import pandas as pd
df = pd.read_csv("powerladder_data.csv", encoding="utf-8-sig")
print(df.head())  # 데이터 확인
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
# 입력 변수(X)와 예측할 대상(y) 분리
X = df[["회차", "줄수"]]  # 입력 변수
y = df["결과"]  # 예측 대상
# 훈련 / 테스트 데이터 분할
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# 랜덤 포레스트 모델 학습
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
# 모델 평가
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("✅ 한글 출력 테스트")  # 정상 출력 확인
import sys
sys.stdout.reconfigure(encoding='utf-8')
print(f"✅ 모델 정확도: {accuracy:.2f}")
from sklearn.metrics import accuracy_score
# 예측 수행
y_pred = model.predict(X_test)
# 정확도 계산
accuracy = accuracy_score(y_test, y_pred)
# 출력
print(f"✅ 모델 정확도: {accuracy:.2f}")
# 필요한 라이브러리 임포트
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
# 데이터 불러오기
df = pd.read_csv("powerladder_data.csv", encoding="utf-8-sig")
# 입력 변수(X)와 예측 대상(y) 분리
X = df[["회차", "줄수"]]  # 입력 변수 (회차와 줄수 사용)
y = df["결과"]  # 예측 대상 (좌/우)
# 훈련 / 테스트 데이터 분할
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# 랜덤 포레스트 모델 학습
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
# 예측 수행
y_pred = model.predict(X_test)
# 정확도 계산
accuracy = accuracy_score(y_test, y_pred)
# 결과 출력
print(f"✅ 모델 정확도: {accuracy:.2f}")
import numpy as np
# 각 데이터 포인트에 대해 예측 확률 확인
probabilities = model.predict_proba(X_test)
# 클래스(labels) 정보 가져오기
labels = model.classes_
# 예측 확률과 클래스 결합
predictions_with_probs = [
    sorted(zip(prob, labels), reverse=True)[:3] for prob in probabilities
    ]
# 상위 3개 예측 결과 출력
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
        print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0]}, 2위={preds[1]}, 3위={preds[2]}")
        
for i, preds in enumerate(predictions_with_probs[:5]):  
            print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
            0
            
import numpy as np
# 각 데이터 포인트에 대해 예측 확률 확인
probabilities = model.predict_proba(X_test)
# 모델이 학습한 클래스(좌삼짝, 우삼홀, 좌사홀, 우사짝) 순서 확인
labels = model.classes_
# 예측 확률과 클래스 결합하여 상위 3개 선택
predictions_with_probs = [
    sorted(zip(prob, labels), reverse=True)[:3]  # 확률 기준으로 정렬 후 3개 선택
        for prob in probabilities
        ]
# 각 회차별 1~3위 예측 결과 출력 (숫자가 아닌 실제 클래스명으로 변환)
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
        print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
        
# 모델이 학습한 클래스(좌삼짝, 우삼홀, 좌사홀, 우사짝)의 순서 확인
print("모델이 학습한 클래스 순서:", model.classes_)
import numpy as np
# 각 데이터 포인트에 대해 예측 확률 확인
probabilities = model.predict_proba(X_test)
# 모델이 학습한 클래스(좌삼짝, 우삼홀, 좌사홀, 우사짝) 순서 확인
labels = model.classes_
# 예측 확률과 클래스 결합하여 상위 3개 선택
predictions_with_probs = [
    sorted(zip(prob, labels), reverse=True)[:3]  # 확률 기준으로 정렬 후 3개 선택
        for prob in probabilities
        ]
# 각 회차별 1~3위 예측 결과 출력 (숫자가 아닌 실제 클래스명으로 변환)
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
        print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
        
probabilities = model.predict_proba(X_test)
labels = model.classes_
predictions_with_probs = [
    sorted(zip(prob, labels), reverse=True)[:3]  # 확률 기준으로 정렬 후 3개 선택
        for prob in probabilities
        ]
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
        print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
        
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
            if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                while len(preds) < 3:
                                                        preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                            print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
                                                            
for i, preds in enumerate(predictions_with_probs[:5]):
                print(f"회차 {X_test.iloc[i, 0]} 예측값:", preds)
                
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                    if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                while len(preds) < 3:
                                                                                preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                    
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                        if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                        while len(preds) < 3:
                                                                                            preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                            if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                while len(preds) < 3:
                                                                                                        preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                            
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                                if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                        while len(preds) < 3:
                                                                                                                    preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                        
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
or i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
    if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
        while len(preds) < 3:
            preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
    
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
# 각 회차별 1~3위 예측 결과 출력 (숫자가 아닌 실제 클래스명으로 변환)
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                                    if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                while len(preds) < 3:
                                                                                                                                preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                                    
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
# 각 회차별 1~3위 예측 결과 출력 (숫자가 아닌 실제 클래스명으로 변환)
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                                        if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                        while len(preds) < 3:
                                                                                                                                            preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                                            
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
# 각 회차별 1~3위 예측 결과 출력 (숫자가 아닌 실제 클래스명으로 변환)
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                                            if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                while len(preds) < 3:
                                                                                                                                                        preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                                                        
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
# 각 회차별 1~3위 예측 결과 출력 (숫자가 아닌 실제 클래스명으로 변환)
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                                                if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                        while len(preds) < 3:
                                                                                                                                                                    preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                                                                    
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
# 각 회차별 1~3위 예측 결과 출력 (숫자가 아닌 실제 클래스명으로 변환)
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                                                    if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                while len(preds) < 3:
                                                                                                                                                                                preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                                                                                
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
# 각 회차별 1~3위 예측 결과 출력 (숫자가 아닌 실제 클래스명으로 변환)
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                                                        if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                        while len(preds) < 3:
                                                                                                                                                                                            preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                                                                                            
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
# 각 회차별 1~3위 예측 결과 출력 (숫자가 아닌 실제 클래스명으로 변환)
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                                                            if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                                while len(preds) < 3:
                                                                                                                                                                                                        preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                                                                                                        
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
# 각 회차별 1~3위 예측 결과 출력 (숫자가 아닌 실제 클래스명으로 변환)
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                                                                if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                                        while len(preds) < 3:
                                                                                                                                                                                                                    preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                                                                                                                    
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
exit()
# 필수 라이브러리 임포트
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
# CSV 데이터 불러오기
df = pd.read_csv("powerladder_data.csv", encoding="utf-8-sig")
# 입력 변수(X)와 예측 대상(y) 분리
X = df[["회차", "줄수"]]  # 입력 변수 (회차 & 줄수)
y = df["결과"]  # 예측 대상 (좌삼짝, 우삼홀, 좌사홀, 우사짝)
# 학습 / 테스트 데이터 분할
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# 랜덤 포레스트 모델 학습
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
# 각 데이터 포인트에 대해 예측 확률 확인
probabilities = model.predict_proba(X_test)
# 모델이 학습한 클래스(좌삼짝, 우삼홀, 좌사홀, 우사짝) 순서 확인
labels = model.classes_
# 예측 확률과 클래스 결합하여 상위 3개 선택
predictions_with_probs = [
    sorted(zip(prob, labels), reverse=True)[:3] for prob in probabilities
    ]
# 각 회차별 1~3위 예측 결과 출력 (숫자가 아닌 실제 클래스명으로 변환)
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
        if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                        while len(preds) < 3:
                                            preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                            
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
# 각 회차별 1~3위 예측 결과 출력 (숫자가 아닌 실제 클래스명으로 변환)
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
            if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                while len(preds) < 3:
                                                        preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                        
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
# 각 회차별 1~3위 예측 결과 출력 (숫자가 아닌 실제 클래스명으로 변환)
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                        while len(preds) < 3:
                                                                    preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                        # 예측된 1위, 2위, 3위 출력
                                                                            print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
                                                                            
# 각 회차별 1~3위 예측 결과 출력 (숫자가 아닌 실제 클래스명으로 변환)
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                    if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                while len(preds) < 3:
                                                                                preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                    # 예측된 1위, 2위, 3위 출력
                                                                                        print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
                                                                                        
# 각 회차별 1~3위 예측 결과 출력 (숫자가 아닌 실제 클래스명으로 변환)
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                        if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                        while len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                            preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                # 예측된 1위, 2위, 3위 출력
                                                                                                    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
                                                                                                    
# 각 회차별 1~3위 예측 결과 출력 (숫자가 아닌 실제 클래스명으로 변환)
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                            if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                while len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                        preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                            # 예측된 1위, 2위, 3위 출력
                                                                                                                print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
                                                                                                                
# 각 회차별 1~3위 예측 결과 출력 (숫자가 아닌 실제 클래스명으로 변환)
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                                if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                        while len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                    preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                        # 예측된 1위, 2위, 3위 출력
                                                                                                                            print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
                                                                                                                            
# 각 회차별 1~3위 예측 결과 출력 (숫자가 아닌 실제 클래스명으로 변환)
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                                    if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                while len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                                preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                                    # 예측된 1위, 2위, 3위 출력
                                                                                                                                        print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
                                                                                                                                        
# 각 회차별 1~3위 예측 결과 출력 (숫자가 아닌 실제 클래스명으로 변환)
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                                        if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                        while len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                                            preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                                                
    # 예측된 1위, 2위, 3위 출력
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                                            if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                while len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                                                        preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                                                            
    # 예측된 1위, 2위, 3위 출력
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                                                if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                        while len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                                                                    preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                                                                    
    # 예측된 1위, 2위, 3위 출력
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                                                    if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                while len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                                                                                preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                                                                                
    # 예측된 1위, 2위, 3위 출력
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                                                        if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                        while len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                                                                                            preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                                                                                            
    # 예측된 1위, 2위, 3위 출력
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                                                            if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                                while len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                                                                                                        preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                                                                                                        
    # 예측된 1위, 2위, 3위 출력
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                                                                if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                                        while len(preds) < 3: preds.append(("N/A", "없음"))  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                                            print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
                                                                                                                                            
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                                                                    while len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                                                preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                                                
    # 예측된 1위, 2위, 3위 출력
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
for i, preds in enumerate(predictions_with_probs[:5]):  # 처음 5개만 출력
                                                                        if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                                                        while len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                                                                                                                                            preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                                                                                                                                            
    # 예측된 1위, 2위, 3위 출력
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
# 예시 코드
for i, preds in enumerate(predictions_with_probs[:5]):  # 첫 5개만 출력
                                                                            if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                                                                while len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                                                                                                                                                        preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                                                                                                                                                            # 예측된 1위, 2위, 3위 출력
                                                                                                                                                                                                                                                                print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
                                                                                                                                                                                                                                                                
# 예시 코드
for i, preds in enumerate(predictions_with_probs[:5]):  # 첫 5개만 출력
                                                                                if len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                                                                        while len(preds) < 3:  # 예측된 값이 3개 미만이면 기본값을 넣어줌
                                                                                                                                                                                                                                                                    preds.append(("N/A", "없음"))  # 확률이 부족할 경우 '없음' 추가
                                                                                                                                                                                                                                                                    
    # 예측된 1위, 2위, 3위 출력
    print(f"회차 {X_test.iloc[i, 0]}: 1위={preds[0][1]}, 2위={preds[1][1]}, 3위={preds[2][1]}")
import time
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
import pandas as pd
# ChromeDriver 경로 설정
chrome_driver_path = "./chromedriver.exe"  # chromedriver.exe가 있는 위치
service = Service(chrome_driver_path)
options = webdriver.ChromeOptions()
options.add_argument("--headless")  # 브라우저 창을 띄우지 않고 실행
driver = webdriver.Chrome(service=service, options=options)
# 파워사다리 사이트 접속
url = "https://ntry.com/_m/scores/power_ladder/main.php"
driver.get(url)
# 페이지가 로드될 때까지 대기
time.sleep(3)  # 3초 대기
# 데이터 크롤링 예시 (표 형식에 맞게 크롤링 코드 수정 필요)
data = [
    [238, "2025-03-16", "우", 4],
        [237, "2025-03-16", "좌", 4],
            [240, "2025-03-16", "좌", 4],
                [239, "2025-03-16", "우", 4],
                    [236, "2025-03-16", "우", 4],
                        # (추가 데이터)
                        ]
# 예시 데이터를 DataFrame으로 변환
df = pd.DataFrame(data, columns=["회차", "날짜", "결과", "출수"])
# CSV 파일로 저장 (UTF-8 인코딩)
df.to_csv("powerladder_data.csv", index=False, encoding="utf-8-sig")
print("CSV 파일이 성공적으로 저장되었습니다!")
exit()
import time
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
import pandas as pd
# ChromeDriver 경로 설정
chrome_driver_path = "./chromedriver.exe"  # chromedriver.exe가 있는 위치
service = Service(chrome_driver_path)
options = Options()
options.add_argument("--headless")  # 브라우저 안 띄우고 실행
driver = webdriver.Chrome(service=service, options=options)
# 파워사다리 사이트 접속
url = "https://ntry.com/m/scores/power_ladder/main.php"
driver.get(url)
# 페이지가 로드될 때까지 대기
time.sleep(3)  # 3초 대기
# 데이터 클롤링 예시 (표 형식에 맞게 크롤링 코드 수정 필요)
data = [
    [238, "2025-03-16", "우", 4],
        [237, "2025-03-16", "좌", 4],
            [240, "2025-03-16", "좌", 4],
                [239, "2025-03-16", "우", 4],
                    [236, "2025-03-16", "우", 4]
                        # (추가 데이터)
                        ]
# 예시 데이터를 DataFrame으로 변환
df = pd.DataFrame(data, columns=["회차", "날짜", "결과", "출수"])
# CSV 파일로 저장 (UTF-8 인코딩)
df.to_csv("powerladder_data.csv", index=False, encoding="utf-8-sig")
print("CSV 파일이 성공적으로 저장되었습니다!")
# 브라우저 종료
driver.quit()
# 예시 코드
import time
print("안녕하세요, 파이썬 스크립트입니다!")
time.sleep(3)  # 3초 대기
print("스크립트 실행 완료!")
exit()
exit()
exit()
